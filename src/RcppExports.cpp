// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// hr_arma_fit_cpp
Rcpp::List hr_arma_fit_cpp(const arma::vec& y_in, int p, int q, int p_big, int iter);
RcppExport SEXP _fmriAR_hr_arma_fit_cpp(SEXP y_inSEXP, SEXP pSEXP, SEXP qSEXP, SEXP p_bigSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_in(y_inSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type p_big(p_bigSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(hr_arma_fit_cpp(y_in, p, q, p_big, iter));
    return rcpp_result_gen;
END_RCPP
}
// parcel_means_cpp
NumericMatrix parcel_means_cpp(const NumericMatrix& resid, const IntegerVector& parcels, int K, bool na_rm);
RcppExport SEXP _fmriAR_parcel_means_cpp(SEXP residSEXP, SEXP parcelsSEXP, SEXP KSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type resid(residSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type parcels(parcelsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(parcel_means_cpp(resid, parcels, K, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// segmented_acvf_cpp
NumericVector segmented_acvf_cpp(const NumericVector& y, const IntegerVector& run_starts, int max_lag, bool unbiased, bool center);
RcppExport SEXP _fmriAR_segmented_acvf_cpp(SEXP ySEXP, SEXP run_startsSEXP, SEXP max_lagSEXP, SEXP unbiasedSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type run_starts(run_startsSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    Rcpp::traits::input_parameter< bool >::type unbiased(unbiasedSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(segmented_acvf_cpp(y, run_starts, max_lag, unbiased, center));
    return rcpp_result_gen;
END_RCPP
}
// yw_from_acvf_cpp
Rcpp::List yw_from_acvf_cpp(const NumericVector& gamma, int p);
RcppExport SEXP _fmriAR_yw_from_acvf_cpp(SEXP gammaSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(yw_from_acvf_cpp(gamma, p));
    return rcpp_result_gen;
END_RCPP
}
// arma_whiten_inplace
Rcpp::List arma_whiten_inplace(Rcpp::NumericMatrix Y, Rcpp::NumericMatrix X, const arma::vec& phi, const arma::vec& theta, Rcpp::IntegerVector run_starts, bool exact_first_ar1, bool parallel);
RcppExport SEXP _fmriAR_arma_whiten_inplace(SEXP YSEXP, SEXP XSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP run_startsSEXP, SEXP exact_first_ar1SEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type run_starts(run_startsSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_first_ar1(exact_first_ar1SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_whiten_inplace(Y, X, phi, theta, run_starts, exact_first_ar1, parallel));
    return rcpp_result_gen;
END_RCPP
}
// arma_whiten_void
void arma_whiten_void(Rcpp::NumericMatrix Y, Rcpp::NumericMatrix X, const arma::vec& phi, const arma::vec& theta, Rcpp::IntegerVector run_starts, bool exact_first_ar1, bool parallel);
RcppExport SEXP _fmriAR_arma_whiten_void(SEXP YSEXP, SEXP XSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP run_startsSEXP, SEXP exact_first_ar1SEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type run_starts(run_startsSEXP);
    Rcpp::traits::input_parameter< bool >::type exact_first_ar1(exact_first_ar1SEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    arma_whiten_void(Y, X, phi, theta, run_starts, exact_first_ar1, parallel);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fmriAR_hr_arma_fit_cpp", (DL_FUNC) &_fmriAR_hr_arma_fit_cpp, 5},
    {"_fmriAR_parcel_means_cpp", (DL_FUNC) &_fmriAR_parcel_means_cpp, 4},
    {"_fmriAR_segmented_acvf_cpp", (DL_FUNC) &_fmriAR_segmented_acvf_cpp, 5},
    {"_fmriAR_yw_from_acvf_cpp", (DL_FUNC) &_fmriAR_yw_from_acvf_cpp, 2},
    {"_fmriAR_arma_whiten_inplace", (DL_FUNC) &_fmriAR_arma_whiten_inplace, 7},
    {"_fmriAR_arma_whiten_void", (DL_FUNC) &_fmriAR_arma_whiten_void, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_fmriAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
